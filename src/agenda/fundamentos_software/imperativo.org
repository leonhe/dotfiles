#+TITLE: Paradigma Imperativo
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage[brazil,english]{babel}
#+language: pt
#+macro: lang @@latex:\selectlanguage{$1}@@
{{{lang(english)}}}
#+begin_abstract
This article aims to show some specificity of the imperative paradigm, furthermore showing an analisys of how it compares
with the functional paradigm. For a better visualizations and understanding, tables will be use to show its differences.
#+end_abstract
{{{lang(portuguese)}}}
#+begin_abstract
Esse artigo visa demostrar a especificidades do paradigma imperativo, além de exibir uma análise de como o mesmo se contrapõe com o paradigma funcional. Para que a visualização e entendimento sejam claros serão utilizadas tabelas contrastando essas diferenças.
#+end_abstract



* Contextualização

  Uma linguagem de programação é a padronização de métodos que tem como objetivo comunicar instruções um computador mantendo a mesma estrutura sintática. Não obstante, um paradigma de programação é a visão que o indivíduo que digita o código tem sobre a estrutura e execuçjão de um programa. O que nos leva a concluir que diferentes linguagem fazem escolhas diferentes quanto a forma e compilação dos mesmos, dependendo da visão que o seu autor vê como o mais ajustado para enfrentar os seus desafios e problemas que a mesma tenta resolver.
** Paradigma Imperativo

  Mas o que torna uma linguagem imperativa? Basicamente um programa encrito de maneira imperativa possui duas característica básicas:

  - Um estado do programa;
  - Instruções que alteram o estado do programa;

    Por intruções pode se inferir o sentido lexical da palavra de mandar, ou imperar que uma atividade seja executada de forma autoritária. Uma frase que é usualmente  usada na literatura para decrever esse paradigma é

    #+BEGIN_QUOTE
    Primeiro faça isso, depois faça aquilo.
    #+END_QUOTE

    Indicando que o prgramador é diretamente responsável por preconceber todos os caminhos em que o usuário vai poder percorrer. O problema começa a aparecer quando o tamanho do programa cresce. Maiores programas oferecem mais "caminhos" aos usuário, que exponecialmente aumentam a combinações de rotas possíveis em que o usuário teóricamente tem acesso. Com isso situações atípicas podem intruduzir bugs de difícil reconhecimento tornando o código de difícil manutenção.

** Paradigma Funcional




* Linguagens Imperativas
