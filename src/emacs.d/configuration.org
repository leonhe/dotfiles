My emacs configuration! Enjoy
* Basic
  #+BEGIN_SRC emacs-lisp

(require 'pallet)
(pallet-mode t)

;; load use-package
(eval-when-compile (require 'use-package))
(require 'diminish)
(require 'bind-key)


  #+END_SRC
* Setup
** Set personal information
   I am a gopher!
   #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Francesco Antonello Ferraro"
        user-mail-address "francescoaferraro@gmail.com "
        calendar-latitude 42.2
        calendar-longitude -71.1
        calendar-location-name "Cambridge, MA")
   #+END_SRC

   #+RESULTS:
   : Cambridge, MA

** Kill other bufferso


   #+BEGIN_SRC emacs-lisp
     (defun kill-other-buffers ()
       "Kill all other buffers."
       (interactive)
       (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
   #+END_SRC

** Osx
   #+BEGIN_SRC emacs-lisp
(setq mac-option-modifier 'meta)
(setq mac-command-modifier 'control)
(setq mac-control-modifier 'super)
   #+END_SRC
** PDF

   #+BEGIN_SRC emacs-lisp
(setq doc-view-continuous t)
   #+END_SRC

** Errors

   #+BEGIN_SRC emacs-lisp
(setq help-at-pt-display-when-idle t)
(setq help-at-pt-timer-delay 0.1)
(help-at-pt-set-timer)
   #+END_SRC

** FontSize

   #+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 150)
   #+END_SRC

** Shift+ Enter

   #+BEGIN_SRC emacs-lisp
     (defun cesco/insert-empty-line ()
       (interactive)
       (newline))
     (global-set-key [(shift return)] 'cesco/insert-empty-line)
   #+END_SRC
** tabbar

   #+BEGIN_SRC emacs-lisp
(use-package tabbar
  :after evil
  :init
  (setq tabbar-cycle-scope 'tabs)
  (setq tabbar-background-color nil)
  (setq tabbar-separator (quote (1.0)))
  (setq tool-bar-mode nil)
  :config
  (setq tabbar-background-color "#393939")
  (custom-set-faces
   '(tabbar-default ((t (:inherit variable-pitch :height 1.4 :background "#393939" :foreground "black" :weight bold))))
   '(tabbar-button ((t (:inherit tabbar-default :foreground "#f2f0ec"))))
   '(tabbar-button-highlight ((t (:inherit tabbar-default))))
   '(tabbar-highlight ((t (:underline t))))
   '(tabbar-selected ((t (:inherit tabbar-default :background "#393939" :foreground "#ffcc66"))))
   '(tabbar-separator ((t (:inherit tabbar-default :background "#393939"))))
   '(tabbar-unselected ((t (:inherit tabbar-default)))))
  (global-set-key (kbd "s-{") 'tabbar-backward-group)
  (global-set-key (kbd "s-}") 'tabbar-forward-group)
  (global-set-key (kbd "s-[") 'tabbar-backward)
  (global-set-key (kbd "s-]") 'tabbar-forward)
  (defun my-tabbar-buffer-groups-by-project ()
    (list
     (cond
      ((memq major-mode '(mu4e-view-mode mu4e-main-mode mu4e-headers-mode mu4e-view-raw-mode
					 twittering-mode weibo-timeline-mode
					 jabber-roster-mode jabber-chat-mode erc-mode douban-music-mode
					 ))
       "Activity"
       )
      ((memq major-mode '(eshell-mode term-mode shell-mode))
       (if (projectile-project-p) (projectile-project-name) "Common")
       )
      ((string-equal "*" (substring (buffer-name) 0 1))
       "Emacs"
       )
      ((memq major-mode '(fundamental-mode))
       "Emacs"
       )
      (t
       (if (projectile-project-p) (projectile-project-name) "Common")
       )
      )))

  (defun my-tabbar-buffer-groups-by-all ()
    (list
     (cond
      ((string-equal "*" (substring (buffer-name) 0 1))
       "Emacs"
       )
      (t "All"))))

  (setq tabbar-buffer-groups-function 'my-tabbar-buffer-groups-by-project)
  (tabbar-mode 1))
   #+END_SRC
** Indent
   #+BEGIN_SRC emacs-lisp

     (defun cesco/indent ()
       (interactive)
       (mark-whole-buffer)
       (indent-region (point-min) (point-max) nil)
       (pop-global-mark)
       )

   #+END_SRC

** PATH

   #+BEGIN_SRC emacs-lisp

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))


   #+END_SRC

   #+RESULTS:
   | bash | cannot set terminal process group (-1) | Inappropriate ioctl for devicebash | no job control in this shell[3;J[H[2J/home/cescoferraro/.nvm/versions/node/v6.10.2/bin | bash | cannot set terminal process group (-1) | Inappropriate ioctl for devicebash | no job control in this shell[3;J[H[2Jbash | cannot set terminal process group (-1) | Inappropriate ioctl for devicebash | no job control in this shell[3;J[H[2Jbash | cannot set terminal process group (-1) | Inappropriate ioctl for devicebash | no job control in this shell[3;J[H[2J/home/cescoferraro/.cargo/bin | /home/cescoferraro/bin | /usr/local/sbin | /usr/local/bin | /usr/sbin | /usr/bin | /sbin | /bin | /usr/games | /usr/local/games |

** Silence dumb warning
   #+BEGIN_SRC emacs-lisp
(setq ad-redefinition-action 'accept)
   #+END_SRC
** Force Fullscreen
   It forces emacs into full-screen-mode.
   #+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook 'toggle-frame-fullscreen t)
   #+END_SRC

** Set Theme
   #+BEGIN_SRC emacs-lisp
     ;; (load-theme 'tsdh-dark)
(use-package color-theme
:ensure t)
;(use-package spacemacs-theme
;:ensure t
;:init
;(load-theme 'spacemacs-dark t))

(use-package zenburn-theme
:ensure t
:init (load-theme 'zenburn t) )

   #+END_SRC

** Hide ToolBar

   #+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
   #+END_SRC

** DEletion Mode
   #+BEGIN_SRC emacs-lisp
   (delete-selection-mode 1)
   #+END_SRC

   #+RESULTS:
   : t

** SimpleClipo
   #+BEGIN_SRC emacs-lisp
     (use-package simpleclip :ensure t
       :config

       (defun copy-to-x-clipboard ()
         (interactive)
         (let ((thing (if (region-active-p)
   		       (buffer-substring-no-properties (region-beginning) (region-end))
   		     (thing-at-point 'symbol))))
   	(simpleclip-set-contents thing)
   	(message "thing => clipboard!")))

       (defun paste-from-x-clipboard()
         "Paste string clipboard"
         (interactive)
         (insert (simpleclip-get-contents)))

       ;; Press `Alt-Y' to paste from clibpoard when in minibuffer
       (defun my/paste-in-minibuffer ()
         (local-set-key (kbd "M-y") 'paste-from-x-clipboard))
       (add-hook 'minibuffer-setup-hook 'my/paste-in-minibuffer)
       )
   #+END_SRC
** Autosave & backup files
   #+BEGIN_SRC emacs-lisp

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

   #+END_SRC
** Y&N

   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Narrow & WIdening

   #+BEGIN_SRC emacs-lisp
(defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
Intelligently means: region, org-src-block, org-subtree, or defun,
whichever applies first.
Narrowing to org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is already
narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning) (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing command.
         ;; Remove this first conditional if you don't want it.
         (cond ((ignore-errors (org-edit-src-code))
                (delete-other-windows))
               ((org-at-block-p)
                (org-narrow-to-block))
               (t (org-narrow-to-subtree))))
        (t (narrow-to-defun))))

;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
;; This line actually replaces Emacs' entire narrowing keymap, that's
;; how much I like this command. Only copy it if that's what you want.
(define-key ctl-x-map "n" #'narrow-or-widen-dwim)

(eval-after-load 'org-src
  '(define-key org-src-mode-map
     "\C-x\C-s" #'org-edit-src-exit))

   #+END_SRC
** Prefer vertical window
   #+BEGIN_SRC emacs-lisp
(setq split-width-threshold 1 )
   #+END_SRC
* Org
  #+BEGIN_SRC emacs-lisp
    (use-package org :ensure t
      :config

      (require 'ox-latex)
      (use-package org-bullets
        :ensure t
        :config


        (add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))
        )

      (use-package ox-reveal
        :ensure ox-reveal)

      (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
      (setq org-reveal-mathjax t)

      (use-package htmlize
        :ensure t)


      (add-hook 'org-mode-hook #'visual-line-mode)
      (setq org-src-fontify-natively t)
      (setq org-src-preserve-indentation t)
      (setq org-confirm-babel-evaluate nil)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)
         (go . t)
         (java . t)
         (lisp . t)))

      )

  #+END_SRC
* Packages
** Helm

   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :bind (
   	   ("M-x" . helm-M-x)
   	   ("C-x C-f" . helm-find-file)
   	   ))

   #+END_SRC
** CSS
   #+BEGIN_SRC emacs-lisp
(use-package css-mode
  :mode (("\\.css\\'" . css-mode)
         ("\\.pcss\\'" . css-mode))
  :ensure t)

   #+END_SRC

** Openwith

   #+BEGIN_SRC emacs-lisp
(use-package openwith
	  :ensure t
	  :config
	  (openwith-mode t)
	  (setq openwith-associations '(("\\.pdf\\'" "evince" (file)))))
   #+END_SRC

** Iedit

   #+BEGIN_SRC emacs-lisp
(use-package iedit :ensure t)
   #+END_SRC
** Editorconfig
   #+BEGIN_SRC emacs-lisp
(use-package editorconfig
   :diminish editorconfig-mode
   :config
  (editorconfig-mode 1))
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
(use-package projectile
	  :config
	  (projectile-global-mode))
   #+END_SRC

** Emmet
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :ensure t
       :init
       (add-hook 'html-mode-hook 'emmet-mode)
       (add-hook 'web-mode-hook 'emmet-mode))
   #+END_SRC
** Linum

   #+BEGIN_SRC emacs-lisp

     (use-package linum-relative
       :diminish linum-relative-mode
       :ensure t
       :config
       (progn
         (add-hook 'prog-mode-hook 'linum-mode)
         (add-hook 'prog-mode-hook 'linum-relative-global-mode)
         (setq linum-relative-current-symbol "")
         )
       )

   #+END_SRC
** Flycheck

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :diminish global-flycheck-mode
       :config
       (global-flycheck-mode)
       (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
       (setq flycheck-display-errors-delay 0)
       (set-face-attribute 'flycheck-error nil :background "#8c5353")
       (set-face-attribute 'flycheck-warning nil :background "#535399")
       :bind (("M-n" . flycheck-next-error)
   	   ("M-p" . flycheck-previous-error))
       )
   #+END_SRC
** Magit

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :demand magit
       :config (progn     (use-package magit-gitflow
   			 :commands (turn-on-magit-gitflow)
   			 :init
   			 (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
   			 )
   		       (evil-leader/set-key "g" 'magit-status)
   		       (setq magit-auto-revert-mode nil)))

     (use-package evil-magit
       :after evil
       :demand evil-magit)

   #+END_SRC

** Hl-line+
   #+BEGIN_SRC emacs-lisp
(use-package hl-line+ :ensure t :config (global-hl-line-mode))
   #+END_SRC
** Which-Keys
   #+BEGIN_SRC emacs-lisp
(use-package which-key :ensure t :diminish which-key-mode :config (which-key-mode))
   #+END_SRC
** Twitter

   #+BEGIN_SRC emacs-lisp
(use-package twittering-mode
  :config
  (setq twittering-use-master-password t)
  (setq twittering-icon-mode t)
  (setq twittering-timer-interval 300)
  (setq twittering-url-show-status nil))
   #+END_SRC

** Neotree
   #+BEGIN_SRC emacs-lisp

     (use-package find-file-in-project :ensure t)


     (use-package neotree
       :after evil
       :bind ([f2] . neotree-projectile-action)
       :config
       (use-package all-the-icons :ensure t
         :config

         (add-to-list 'all-the-icons-icon-alist
   		   '("^dobi.yaml"
   		     all-the-icons-alltheicon "terminal"
   		     :height 1.0
   		     :face all-the-icons-pink))
         (add-to-list 'all-the-icons-icon-alist
   		   '("\\.pcss"
   		     all-the-icons-alltheicon "css3"
   		     :height 1.0
   		     :face all-the-icons-red))
         (add-to-list 'all-the-icons-icon-alist
   		   '("\\.tsx$"
   		     all-the-icons-alltheicon "react"
   		     :height 1.0
   		     :face all-the-icons-blue))
         )
       :init
       (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
       (add-hook 'neotree-mode-hook
   	      (lambda ()
   		(define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
   		(define-key evil-normal-state-local-map (kbd "I") 'neotree-hidden-file-toggle)
   		(define-key evil-normal-state-local-map (kbd "z") 'neotree-stretch-toggle)
   		(define-key evil-normal-state-local-map (kbd "1") 'neotree-change-root)
   		(define-key evil-normal-state-local-map (kbd "R") 'neotree-refresh)
   		(define-key evil-normal-state-local-map (kbd "m") 'neotree-rename-node)
   		(define-key evil-normal-state-local-map (kbd "c") 'neotree-create-node)
   		(define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)

   		(define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
   		(define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split)

   		(define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
   		(define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter))))
   #+END_SRC

   #+RESULTS:

** Ivy
   #+BEGIN_SRC emacs-lisp
     (use-package counsel :ensure t)
     (use-package swiper
       :diminish ivy-mode
       :ensure t
       :config
       (progn
         (ivy-mode 1)
         (setq ivy-use-virtual-buffers t)
         (setq enable-recursive-minibuffers t)
         (global-set-key "\C-s" 'swiper)
         (global-set-key (kbd "C-c C-r") 'ivy-resume)
         (global-set-key (kbd "<f6>") 'ivy-resume)
         (global-set-key (kbd "<f1> f") 'counsel-describe-function)
         (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
         (global-set-key (kbd "<f1> l") 'counsel-find-library)
         ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
         ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
         (global-set-key (kbd "C-c k") 'counsel-ag)
         (global-set-key (kbd "C-x l") 'counsel-locate)
         (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
         (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
         )
       )


   #+END_SRC
** Golden-ratio
   #+BEGIN_SRC emacs-lisp
     (use-package golden-ratio
       :diminish golden-ratio-mode
   	    :config
   	    (golden-ratio-mode 1))
   #+END_SRC
** Beacon
   #+BEGIN_SRC emacs-lisp
(use-package beacon
:diminish beacon-mode
:ensure t
:config
(progn
(beacon-mode 1)
(setq beacon-push-mark 35)
(setq beacon-color "#666600")))
   #+END_SRC
** ModeLine
   #+BEGIN_SRC emacs-lisp
(use-package      smart-mode-line-powerline-theme
    :ensure smart-mode-line-powerline-theme)
  (use-package smart-mode-line
    :ensure smart-mode-line
    :init
    (progn
    (setq sml/no-confirm-load-theme t)
    (sml/setup)
    (sml/apply-theme 'powerline))
)
(use-package spaceline
:ensure t
:init (progn
(require 'spaceline-config)
(spaceline-spacemacs-theme)
)
(require 'diminish)
(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
(eval-after-load "undo-tree" '(diminish 'undo-tree-mode))
(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "smartparens" '(diminish 'smartparens-mode))
(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(diminish 'visual-line-mode))
   #+END_SRC
** Yasnippet

   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
   :config
	  (yas-global-mode 1))
   #+END_SRC

** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config
       (progn
(add-to-list 'company-backends '(company-elisp  :with company-yasnippet))
         (define-key company-active-map (kbd "M-n") nil)
         (define-key company-active-map (kbd "M-p") nil)
         (define-key company-active-map (kbd "C-n") #'company-select-next)
         (define-key company-active-map (kbd "C-p") #'company-select-previous)
  (require 'company-emacs-eclim)
  (company-emacs-eclim-setup)
         (global-company-mode +1))
       :init
       (progn
         (setq company-dabbrev-downcase 0)
         (setq company-idle-delay 0)
         (setq company-dabbrev-code-everywhere t)
         (setq company-minimum-prefix-length 1)
         (setq-default company-idle-delay 0)
         (setq-default company-tooltip-align-annotations t)
         )
       )
   #+END_SRC
** Startup Screen
   #+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(use-package dashboard
  :config
  (dashboard-setup-startup-hook))

   #+END_SRC

** SmartParens
   #+BEGIN_SRC emacs-lisp

     (use-package smartparens
       :ensure smartparens
       :config
       (progn
         (require 'smartparens-config)
         (require 'smartparens-html)
         (require 'smartparens-python)
         (require 'smartparens-latex)
         (smartparens-global-mode t)
         (show-smartparens-global-mode t)
         )

       )

   #+END_SRC

** Engine Mode
   #+BEGIN_SRC emacs-lisp
;; engine
;; Search engines integrated into Emacs.
(use-package engine-mode
  :commands (engine/search-github engine/search-google)
  :config

  (global-set-key (kbd "C-c g") 'engine/search-google)
  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "h")
  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "g"))
   #+END_SRC
** Expand-Region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :after evil
       :ensure t
       :config
       (eval-after-load "evil" '(setq expand-region-contract-fast-key "z"))
       (evil-leader/set-key "xx" 'er/expand-region)
       (global-set-key (kbd "C-a") 'er/expand-region)
       (global-set-key (kbd "C-c a") 'er/expand-region)
       )
   #+END_SRC

** Kubernetes Timonier
   #+BEGIN_SRC emacs-lisp
     (setq timonier-k8s-proxy "http://127.0.0.1:8001")
   #+END_SRC
* Languages
** Golang
*** Go path
    #+BEGIN_SRC emacs-lisp
(cond
   ((string-equal system-type "gnu/linux")(setenv "GOPATH" "/home/cescoferraro/go"))
   ((string-equal system-type "darwin")(setenv "GOPATH" "/Users/cesco/go")))
(add-to-list 'exec-path (concat (getenv "GOPATH")  "/bin"))
(add-to-list 'load-path (concat (getenv "GOPATH")  "/src/github.com/golang/lint/misc/emacs"))
    #+END_SRC

*** Go-company

    #+BEGIN_SRC emacs-lisp
(use-package company-go
  :ensure t
  :config
  (progn
    (add-to-list 'company-backends '(company-go :with company-yasnippet))
    )
  (setq company-go-show-annotation t)
  (setq company-go-insert-arguments t))
    #+END_SRC
*** Go-mode
    #+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
  :after evil
  :config

  (use-package golint :ensure t)
  (use-package godoctor :ensure t)
  (evil-leader/set-key-for-mode 'go-mode "j" 'godef-jump)
  (defun my-go-mode-hook ()
    (add-hook 'before-save-hook 'gofmt-before-save)
    (setq gofmt-command "goimports")
    (setq tab-width 8)
    (if (not (string-match "go" compile-command))
	(set (make-local-variable 'compile-command)
	     "go build -v && go test -v && go vet"))
    (load-file "$GOPATH/src/github.com/dominikh/go-mode.el/go-guru.el")
    )
  (add-hook 'go-mode-hook 'go-eldoc-setup)
  (add-hook 'go-mode-hook 'my-go-mode-hook)

  )
    #+END_SRC

** Java
*** Gradle
    skdbfjsdf
    #+BEGIN_SRC emacs-lisp

(use-package gradle-mode
	  :ensure gradle-mode
	  :config
	  (progn
	(add-hook 'groovy-mode 'gradle-mode)
	(add-to-list 'auto-mode-alist '("\\.gradle?\\'" . gradle-mode))
(defun build-and-run ()
	(interactive)
	(gradle-run "build run"))

(define-key gradle-mode-map (kbd "C-c C-r") 'build-and-run)
	    (gradle-mode 1)
	    ))
    #+END_SRC
*** Eclim
    #+BEGIN_SRC emacs-lisp

(use-package eclim
:ensure t
:if (string-match-p (regexp-quote "cesco") user-login-name)
:config (progn
(setq eclimd-autostart t)

(cond
   ((string-equal system-type "gnu/linux")
        ;; window size

(setq eclim-executable "/opt/eclipse/eclim")
        )
   ((string-equal system-type "darwin")
    ;; window size
(setq eclim-executable "~/eclipse/Eclipse.app/Contents/Eclipse/eclim")
    )
)
(define-key eclim-mode-map (kbd "C-c C-c") 'eclim-problems-correct)
(global-eclim-mode)
				 ))


    #+END_SRC
*** Meghanada


    #+BEGIN_SRC emacs-lisp

(use-package meghanada :ensure t
:if (not (string-match-p (regexp-quote "cesco") user-login-name))
  :after evil-leader
  :config (progn

     (evil-leader/set-key-for-mode 'java-mode "t"
       (lambda ()
         (interactive)
         (meghanada-run-task "test")
         (ace-window "")
         (golden-ratio)
         )
       )
     (evil-leader/set-key-for-mode 'java-mode "c"
       (lambda ()
         (interactive)
         (meghanada-run-task "run")
         (ace-window "")
         (golden-ratio)
         )
       )


     (add-hook 'java-mode-hook
   	    (lambda ()
   	      ;; meghanada-mode on
   	      (meghanada-mode t)
   	      (add-hook 'before-save-hook (lambda ()
   					    (flycheck-display-error-at-point)
   					    (meghanada-code-beautify-before-save)
   					    ))))
	    )

  )
    #+END_SRC

** Typescript

   #+BEGIN_SRC emacs-lisp
(use-package tide
  :ensure t
  :after evil-leader
  :config
  (progn
    (evil-leader/set-key-for-mode 'web-mode
      "j"  (lambda ()
	     (interactive)
	     (tide-jump-to-implementation )
	     )
      "g"  (lambda ()
	     (interactive)
	     (tide-jump-to-definition )
	     )
      )

    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (add-to-list 'company-backends '(company-tide :with company-yasnippet))
      )

    ;; formats the buffer before saving
    (add-hook 'before-save-hook 'tide-format-before-save)

    (add-hook 'typescript-mode-hook #'setup-tide-mode)

    (use-package web-mode :ensure t
      :config

      (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
      (add-hook 'web-mode-hook
		(lambda ()
		  (when (string-equal "tsx" (file-name-extension buffer-file-name))
		    (setup-tide-mode))))

      (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
      (add-hook 'web-mode-hook
		(lambda ()
		  (when (string-equal "jsx" (file-name-extension buffer-file-name))
		    (setup-tide-mode))))

      )
    )
  )


   #+END_SRC
* Evil
** Evil Paraphernalia
   #+BEGIN_SRC emacs-lisp
     (use-package evil-nerd-commenter
       :ensure t
       :config (progn
                 (evilnc-default-hotkeys)))

     (use-package
       evil-smartparens
       :diminish evil-smartparens-mode
       :ensure t
       :init (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
     (use-package evil-org :ensure t)
     (use-package evil-surround
       :ensure t
       :config
       (global-evil-surround-mode))

   #+END_SRC
** Evil-Leader
   #+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :ensure t
  :config
  (evil-leader/set-leader ",")
  (evil-leader/set-key
    "m"  (lambda () (interactive)
	   (if (string-equal " *NeoTree*" (buffer-name))
	       (progn
		 (delete-window)
		 (message "have just deleted neotree window"))
	     (progn
	       (if (projectile-project-p) ;; detect if current buffer is in a project
		   (neotree-projectile-action)
		 (neotree-toggle))
	       (message "have just popped neotree"))))
    "/" 'evilnc-comment-or-uncomment-lines
    "ci" 'evilnc-comment-or-uncomment-lines
    "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
    "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
    "cc" 'evilnc-copy-and-comment-lines
    "cp" 'evilnc-comment-or-uncomment-paragraphs
    "cr" 'comment-or-uncomment-region
    "cv" 'evilnc-toggle-invert-comment-line-by-line
    "\\" 'evilnc-comment-operator
    "z" 'zoom-window-zoom
    "f" 'helm-projectile
    "b" 'helm-buffers-list
    "s" 'save-buffer
    "q" 'kill-emacs
    "G" 'magit-status
    "w" 'delete-window
    "e" 'kill-this-buffer
    "," 'previous-buffer
    ";" 'projectile-run-eshell
    "E" 'org-export-dispatch
    "i" 'cesco/indent
    "TAB" 'org-cycle
    "p" 'projectile-switch-project
    (kbd ".") (lambda () (interactive)(golden-ratio)(ace-window ""))
    (kbd "o") (lambda () (interactive) (find-file "~/.emacs.d/configuration.org")))


  (global-evil-leader-mode)
  )
   #+END_SRC

   #+RESULTS:
   : t

** Evil itself
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :after evil-leader
       :config

       (define-key evil-normal-state-map "L" 'tabbar-forward-tab)
       (define-key evil-normal-state-map "H" 'tabbar-backward-tab)
       (evil-mode)
       (set-default 'evil-symbol-word-search t)
       )
   #+END_SRC
   #+BEGIN_SRC emacs-list :tangle yes

   #+END_SRC
