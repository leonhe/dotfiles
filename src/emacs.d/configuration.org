My Emacs Configuration! Enjoy

* Basic
  #+BEGIN_SRC emacs-lisp

(require 'pallet)
(pallet-mode t)

;; load use-package
(eval-when-compile (require 'use-package))
(require 'diminish)
(require 'bind-key)


  #+END_SRC

* Setup

** Auto revert mode
   #+begin_src emacs-lisp
(global-auto-revert-mode 1)
   #+end_src

** shell
   #+begin_src emacs-lisp
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
   #+end_src

** TODO TOOGLE
   #+begin_src emacs-lisp
(defun xah-toggle-letter-case ()
  "Toggle the letter case of current word or text selection.
Always cycle in this order: Init Caps, ALL CAPS, all lower.

URL `http://ergoemacs.org/emacs/modernization_upcase-word.html'
Version 2017-04-19"
  (interactive)
  (let (
        (deactivate-mark nil)
        -p1 -p2)
    (if (use-region-p)
        (setq -p1 (region-beginning)
              -p2 (region-end))
      (save-excursion
        (skip-chars-backward "[:alnum:]-_")
        (setq -p1 (point))
        (skip-chars-forward "[:alnum:]-_")
        (setq -p2 (point))))
    (when (not (eq last-command this-command))
      (put this-command 'state 0))
    (cond
     ((equal 0 (get this-command 'state))
      (upcase-initials-region -p1 -p2)
      (put this-command 'state 1))
     ((equal 1  (get this-command 'state))
      (upcase-region -p1 -p2)
      (put this-command 'state 2))
     ((equal 2 (get this-command 'state))
      (downcase-region -p1 -p2)
      (put this-command 'state 0)))))
(global-set-key (kbd "C-c t") 'xah-toggle-letter-case)
   #+end_src

** SLQ ORACLE
   #+begin_src emacs-lisp
(defun cesco/sqlplus ()
  (interactive)
  (sqlplus "system/oracle@localhost:1521"))

(setq sql-oracle-login-params
      '((user     :default "system")
        (password :default (password-read "Password:" "oracle"))
        (database :default "localhost:1521/xe")))
   #+end_src

** HideShow Folding
   #+begin_src emacs-lisp
(use-package hideshow
  :diminish hs-minor-mode
  :config
  (defun hs-hide-stuff ()
    (hs-minor-mode 1)
    (hs-hide-level 3))
  (add-hook 'js2-mode-hook #'hs-hide-stuff )
  (add-hook 'web-mode-hook 'hs-minor-mode )
  (add-hook 'go-mode-hook #'hs-hide-stuff )
  (add-hook 'java-mode-hook #'hs-hide-stuff )
  (add-hook 'emacs-lisp-mode-hook #'hs-hide-stuff )
  (add-hook 'lisp-mode-hook #'hs-hide-stuff )
  (add-hook 'python-mode-hook #'hs-hide-stuff )
  )
   #+end_src

** StrightPush
   #+begin_src emacs-lisp
(defun cesco/automatic-push (msg)
  (interactive
   (list (read-from-minibuffer "Msg:" nil nil nil nil )))
  (message msg)
  (magit-run-git "commit" "--all" "--message=%F %R")
  )

(defun foo3 (n)             ; foo3 takes one argument,
  (interactive
   (list (read-from-minibuffer "Msg:" nil nil nil nil )))
  (message n)
  )
   #+end_src

** Insert SemiColon
   #+begin_src emacs-lisp

(defun cesco/insert-semicolon ()
  (interactive)
  (evil-append-line "1")
  (insert ";")
  (normal-mode)
(pop-global-mark)
  )
   #+end_src

** Set personal information
   I am a gopher!
   #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Francesco Antonello Ferraro"
        user-mail-address "francescoaferraro@gmail.com "
        calendar-latitude 42.2
        calendar-longitude -71.1
        calendar-location-name "Cambridge, MA")
   #+END_SRC

   #+RESULTS:
   : Cambridge, MA

** Kill other bufferso

   #+BEGIN_SRC emacs-lisp
     (defun cesco/kill-other-buffers ()
       "Kill all other buffers."
       (interactive)
       (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
   #+END_SRC

** Osx

   #+BEGIN_SRC emacs-lisp
(setq mac-option-modifier 'meta)
(setq mac-command-modifier 'control)
(setq mac-pass-command-to-system nil)
(setq mac-control-modifier 'super)
   #+END_SRC

** REplace region when typing

   #+BEGIN_SRC emacs-lisp
(delete-selection-mode +1)
   #+END_SRC

** PDF

   #+BEGIN_SRC emacs-lisp
(setq doc-view-continuous t)
   #+END_SRC

** Hide Scroll Bar

   #+begin_src emacs-lisp
(scroll-bar-mode -1)
   #+end_src

** Errors

   #+BEGIN_SRC emacs-lisp
(setq help-at-pt-display-when-idle t)
(setq help-at-pt-timer-delay 0.1)
(help-at-pt-set-timer)
   #+END_SRC

** FontSize

   #+BEGIN_SRC emacs-lisp

(cond
 ((string-equal system-type "gnu/linux")
  (set-face-attribute 'default nil :height 115))
 ((string-equal system-type "darwin")
  (set-face-attribute 'default nil :height 150))
 )

   #+END_SRC

** Shift+ Enter

   #+BEGIN_SRC emacs-lisp
     (defun cesco/insert-empty-line ()
       (interactive)
       (newline))
     (global-set-key [(shift return)] 'cesco/insert-empty-line)
   #+END_SRC

** Indent
   #+BEGIN_SRC emacs-lisp

     (defun cesco/indent ()
       (interactive)
       (mark-whole-buffer)
       (indent-region (point-min) (point-max) nil)
       (pop-global-mark)
       )

   #+END_SRC

** PATH

   #+BEGIN_SRC emacs-lisp

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))


   #+END_SRC

   #+RESULTS:
   | bash | cannot set terminal process group (-1) | Inappropriate ioctl for devicebash | no job control in this shell[3;J[H[2J/home/cescoferraro/.nvm/versions/node/v6.10.2/bin | bash | cannot set terminal process group (-1) | Inappropriate ioctl for devicebash | no job control in this shell[3;J[H[2Jbash | cannot set terminal process group (-1) | Inappropriate ioctl for devicebash | no job control in this shell[3;J[H[2Jbash | cannot set terminal process group (-1) | Inappropriate ioctl for devicebash | no job control in this shell[3;J[H[2J/home/cescoferraro/.cargo/bin | /home/cescoferraro/bin | /usr/local/sbin | /usr/local/bin | /usr/sbin | /usr/bin | /sbin | /bin | /usr/games | /usr/local/games |

** Silence dumb warning

   #+BEGIN_SRC emacs-lisp
(setq ad-redefinition-action 'accept)
   #+END_SRC

** Force Fullscreen
   It forces emacs into full-screen-mode.
   #+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook 'toggle-frame-fullscreen t)
   #+END_SRC

** Set Theme
   #+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :ensure t
  :init
  (load-theme 'spacemacs-dark t))
   #+END_SRC

** Hide ToolBar

   #+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
   #+END_SRC

** DEletion Mode
   #+BEGIN_SRC emacs-lisp
   (delete-selection-mode 1)
   #+END_SRC

   #+RESULTS:
   : t

** SimpleClipo

   #+BEGIN_SRC emacs-lisp
     (use-package simpleclip :ensure t
       :config

       (defun copy-to-x-clipboard ()
         (interactive)
         (let ((thing (if (region-active-p)
   		       (buffer-substring-no-properties (region-beginning) (region-end))
   		     (thing-at-point 'symbol))))
   	(simpleclip-set-contents thing)
   	(message "thing => clipboard!")))

       (defun paste-from-x-clipboard()
         "Paste string clipboard"
         (interactive)
         (insert (simpleclip-get-contents)))

       ;; Press `Alt-Y' to paste from clibpoard when in minibuffer
       (defun my/paste-in-minibuffer ()
         (local-set-key (kbd "M-y") 'paste-from-x-clipboard))
       (add-hook 'minibuffer-setup-hook 'my/paste-in-minibuffer)
       )
   #+END_SRC

** Autosave & backup files

   #+BEGIN_SRC emacs-lisp

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

   #+END_SRC

** Y&N

   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Narrow & WIdening

   #+BEGIN_SRC emacs-lisp
(defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
Intelligently means: region, org-src-block, org-subtree, or defun,
whichever applies first.
Narrowing to org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is already
narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning) (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing command.
         ;; Remove this first conditional if you don't want it.
         (cond ((ignore-errors (org-edit-src-code))
                (delete-other-windows))
               ((org-at-block-p)
                (org-narrow-to-block))
               (t (org-narrow-to-subtree))))
        (t (narrow-to-defun))))

;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
;; This line actually replaces Emacs' entire narrowing keymap, that's
;; how much I like this command. Only copy it if that's what you want.
(define-key ctl-x-map "n" #'narrow-or-widen-dwim)

(eval-after-load 'org-src
  '(define-key org-src-mode-map
     "\C-x\C-s" #'org-edit-src-exit))

   #+END_SRC

** Prefer vertical window

   #+BEGIN_SRC emacs-lisp
(setq split-width-threshold 1 )
   #+END_SRC

* Org

  #+BEGIN_SRC emacs-lisp
;; NO spell check for embedded snippets
(defadvice org-mode-flyspell-verify (after org-mode-flyspell-verify-hack activate)
  (let ((rlt ad-return-value)
	(begin-regexp "^[ \t]*#\\+begin_\\(src\\|html\\|latex\\)")
	(end-regexp "^[ \t]*#\\+end_\\(src\\|html\\|latex\\)")
	old-flag
	b e)
    (when ad-return-value
      (save-excursion
	(setq old-flag case-fold-search)
	(setq case-fold-search t)
	(setq b (re-search-backward begin-regexp nil t))
	(if b (setq e (re-search-forward end-regexp nil t)))
	(setq case-fold-search old-flag))
      (if (and b e (< (point) e)) (setq rlt nil)))
    (setq ad-return-value rlt)))


(defun my/flyspell-hack ()
  (flyspell-mode 1)
  (flyspell-mode -1))

(use-package org
  :after (flyspell)
  :defer t
  :config
  (require 'ox-latex)
  (require 'htmlize)
  (require 'org-bullets)
  (require 'ox-reveal)
  (setq ispell-dictionary "pt_BR")
  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (diminish 'visual-line-mode)
  (setq org-reveal-mathjax t)
  (setq org-support-shift-select t)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (go . t)
     (java . t)
     (lisp . t)))

  (add-hook 'org-mode-hook 'my/flyspell-hack)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))
  (add-hook 'org-mode-hook #'visual-line-mode)

)

  #+END_SRC

* Packages
** HUGO
   #+begin_src emacs-lisp
(defun cesco/easy-hugo ()
  (interactive)
  (evil-define-key
    (list 'normal 'insert 'visual 'motion)
    easy-hugo-mode-map
    "n" 'easy-hugo-newpost
    "D" 'easy-hugo-article
    "p" 'easy-hugo-preview
    "P" 'easy-hugo-publish
    "o" 'easy-hugo-open
    "d" 'easy-hugo-delete
    "e" 'easy-hugo-open
    "c" 'easy-hugo-open-config
    "f" 'easy-hugo-open
    "N" 'easy-hugo-no-help
    "v" 'easy-hugo-view
    "r" 'easy-hugo-refresh
    "g" 'easy-hugo-refresh
    "s" 'easy-hugo-sort-time
    "S" 'easy-hugo-sort-char
    "G" 'easy-hugo-github-deploy
    "A" 'easy-hugo-amazon-s3-deploy
    "C" 'easy-hugo-google-cloud-storage-deploy
    "q" 'evil-delete-buffer
    (kbd "TAB") 'easy-hugo-open
    (kbd "RET") 'easy-hugo-preview)
  (define-key global-map (kbd "C-c C-e") 'easy/hugo))


(use-package easy-hugo
  :after (helm-ag)
  :ensure t
  :config
  (setq easy-hugo-basedir "~/go/src/github.com/cescoferraro/me/"
	easy-hugo-postdir "content/blog"
        easy-hugo-url "http://127.0.0.1:1313/me"
        easy-hugo-preview-url "http://127.0.0.1:1313/me"
        easy-hugo-sshdomain "me"
        easy-hugo-root "~/go/src/github.com/cescoferraro/me/"
        easy-hugo-previewtime "500")
  (add-hook 'easy-hugo-mode-hook 'cesco/easy-hugo))

   #+end_src

** DIRED+
   #+begin_src emacs-lisp
(defun my-dired-view-file ()
  (interactive)
  (dired-view-file)
  (local-set-key (kbd "C-l") 'View-quit))

(defadvice neo-buffer--get-nodes
    (after neo-buffer--get-nodes-new-sorter activate)
  (setq ad-return-value
        (let ((nodes ad-return-value)
              (comparator (lambda (s1 s2) (string< (downcase (reverse-file-extension s1))
                                                   (downcase (reverse-file-extension s2))))))
          (apply 'cons (mapcar (lambda (x) (sort (apply x (list nodes))
                                                 comparator))
                               '(car cdr))))))

(defun reverse-file-extension(filename)
  (mapconcat 'identity (reverse (split-string filename "\\.")) "."))


(use-package dired
  :ensure nil
  :init
  (let ((gls "/usr/local/bin/gls"))
    (if (file-exists-p gls) (setq insert-directory-program gls)))
  :config
  (define-key dired-mode-map (kbd "C-l") 'my-dired-view-file)
  (define-key dired-mode-map (kbd "C-u") 'dired-up-directory)
  (setq dired-listing-switches "-aBhl  --group-directories-first ")
  (define-key dired-mode-map (kbd "H") 'tabbar-backward)
  (define-key dired-mode-map (kbd "L") 'tabbar-forward)
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "TAB") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file ".."))))

(use-package all-the-icons-dired
  :commands (all-the-icons-dired-mode)
  :init
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
   #+end_src

** Zoom-window
   #+begin_src emacs-lisp
(use-package zoom-window
  :after evil-leader
  :bind (("C-x 1" . my-zoom-window-zoom))
  :config
  (setq zoom-window-mode-line-color "#6C71C4")
  (defun my-zoom-window-zoom ()
    (interactive)
    (zoom-window-zoom)
    (powerline-reset))
  (evil-leader/set-key "z" 'my-zoom-window-zoom)
  )

   #+end_src

** Move-text
   #+begin_src emacs-lisp
(use-package move-text
  :ensure t
  :config (progn
	    (global-set-key [(control shift j)] 'move-text-down)
	    (global-set-key [(control shift k)] 'move-text-up)
	    )
  )
   #+end_src

** Nyan Mode

   #+begin_src emacs-lisp
(use-package nyan-mode :ensure t :config (nyan-mode))
   #+end_src

** Emojis

   #+begin_src emacs-lisp
(use-package emojify
  :ensure t
  :config (progn
  (add-hook 'after-init-hook #'global-emojify-mode)))
(use-package emoji-cheat-sheet-plus
  :defer t
  :init
  (progn
    (global-set-key (kbd "C-c M-e") 'emoji-cheat-sheet-plus-insert)))
   #+end_src

** Helm

   #+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :bind (("M-x" . helm-M-x))
  :config
  (define-key global-map (kbd "C-x C-f") 'helm-find-files))

(use-package helm-projectile
  :ensure t
  :config
  (global-set-key (kbd "C-x C-p") 'helm-projectile))
   #+END_SRC

** CSS

   #+BEGIN_SRC emacs-lisp
(defun cesco/pcss ()
  (interactive)
  (if (file-exists-p (executable-find "tcm"))
      (if (projectile-project-p)
	  (if (file-exists-p (concat (projectile-project-root) "tslint.json" ))
	      (let ((default-directory (file-name-directory (buffer-file-name))))
		(shell-command (concat "tcm -p *.pcss")))))
    (message "tcm binary dos not exist!!")))

(use-package css-mode
  :mode (("\\.css\\'" . css-mode)
         ("\\.pcss\\'" . css-mode))
  :ensure t
  :config (add-hook 'after-save-hook #'cesco/pcss))

   #+END_SRC

** Rainbow
   #+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :diminish rainbow-mode
  :config
  (add-hook 'prog-mode-hook 'rainbow-mode))
(use-package rainbow-delimiters
	  :ensure t
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC

** Openwith

   #+BEGIN_SRC emacs-lisp
(use-package openwith
	  :ensure t
	  :config
	  (openwith-mode t)
	  (setq openwith-associations '(("\\.pdf\\'" "evince" (file)))))
   #+END_SRC

** Iedit

   #+BEGIN_SRC emacs-lisp
(use-package iedit :ensure t)
   #+END_SRC

** Editorconfig
   #+BEGIN_SRC emacs-lisp
(use-package editorconfig
   :diminish editorconfig-mode
   :config
  (editorconfig-mode 1))
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
(use-package projectile
	  :config
  (setq projectile-completion-system 'helm)
	  (projectile-global-mode))
   #+END_SRC

** Emmet
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :ensure t
       :diminish emmet-mode
       :init
       (add-hook 'html-mode-hook 'emmet-mode)
       (add-hook 'web-mode-hook 'emmet-mode))
   #+END_SRC

** Linum

   #+BEGIN_SRC emacs-lisp

     (use-package linum-relative
       :diminish linum-relative-mode
       :ensure t
       :config
       (progn
         (add-hook 'prog-mode-hook 'linum-mode)
         (add-hook 'prog-mode-hook 'linum-relative-global-mode)
         (setq linum-relative-current-symbol "")
         )
       )

   #+END_SRC

** Flycheck

   #+BEGIN_SRC emacs-lisp

(use-package flycheck
  :diminish flycheck-mode
  :bind (("M-n" . flycheck-next-error) ("M-p" . flycheck-previous-error))
  :config
  (global-flycheck-mode)
  (flycheck-add-mode 'typescript-tslint 'web-mode)
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  (setq flycheck-display-errors-delay 0)
  (set-face-attribute 'flycheck-error nil :background "#8c5353")
  (set-face-attribute 'flycheck-warning nil :background "#535399")
  )
   #+END_SRC

** GIT

   #+BEGIN_SRC emacs-lisp
(defun cesco/magit-refresh ()
  (interactive)
  (kill-this-buffer)
  (magit-list-repositories)
  )

(defun directory-files-recursive (directory match maxdepth ignore)
  "List files in DIRECTORY and in its sub-directories.
   Return files that match the regular expression MATCH but ignore
   files and directories that match IGNORE (IGNORE is tested before MATCH. Recurse only
   to depth MAXDEPTH. If zero or negative, then do not recurse"
  (let* ((files-list '())
         (current-directory-list
          (directory-files directory t)))
    ;; while we are in the current directory
     (while current-directory-list
       (let ((f (car current-directory-list)))
         (cond
          ((and
           ignore ;; make sure it is not nil
           (string-match ignore f))
           ; ignore
            nil
           )
          ((and
            (file-regular-p f)
            (file-readable-p f)
            (string-match match f))
          (setq files-list (cons f files-list))
           )
          ((and
           (file-directory-p f)
           (file-readable-p f)
           (not (string-equal ".." (substring f -2)))
           (not (string-equal "." (substring f -1)))
           (> maxdepth 0))
           ;; recurse only if necessary
           (setq files-list (append files-list (directory-files-recursive f match (- maxdepth -1) ignore)))
           (setq files-list (cons f files-list))
           )
          (t)
          )
         )
       (setq current-directory-list (cdr current-directory-list))
       )
       files-list
     )
    )

(defun cesco/jump-to-repolist-item (&optional _button)
  "Show the status for the repository at point."
  (interactive)
  (--if-let (tabulated-list-get-id)
      (progn
	(find-file (expand-file-name it) )
	)
    (user-error "There is no repository at point")
    ) )

(defun cesco/delete-repolist-item (&optional _button)
  "Show the status for the repository at point."
  (interactive)
  (--if-let (tabulated-list-get-id)
      (when (yes-or-no-p "Delete Project?")
	(progn
	  (delete-directory (expand-file-name it) t t ))
	(cesco/magit-refresh))
    (user-error "There is no repository at point")
    ) )

(defun cesco/magit-repolist-delete (&optional _button)
  "Show the status for the repository at point."
  (interactive)
  (--if-let (tabulated-list-get-id)
      (if (yes-or-no-p "Remove Repo? ")
	  (progn
	    (delete-directory (expand-file-name it) t t)
	    (cesco/refresh)
	    )
	)
    (user-error "There is no repository at point")))

(defun cesco/magit-repolist-hook ()
  (local-set-key (kbd "C-M-g")  'magit-repolist-status)
  (evil-define-key
    (list 'normal 'insert 'visual 'motion)
    magit-repolist-mode-map
    (kbd "d") 'cesco/delete-repolist-item
    (kbd "q") 'kill-this-buffer
    (kbd "RET") 'cesco/jump-to-repolist-item
    (kbd "d") 'cesco/magit-repolist-delete
    (kbd "r") 'cesco/magit-refresh
    (kbd "TAB") 'magit-repolist-status)
  (message "cesco/magit-repolist-hook")
  )

(defun get-random-element (list)
  "Returns a random element of LIST."
  (if (and list (listp list))
      (nth (random (1- (1+ (length list)))) list)
    (error "Argument to get-random-element not a list or the list is empty")))

(defun cesco/test ()
  (interactive)
  (get-random-element (delete ".." (delete "." (directory-files "~/go/src/github.com/cescoferraro/achars") ) ) )
  )

(use-package git-gutter-fringe
  :diminish git-gutter-mode
  :config
  (global-git-gutter-mode t)
  (set-face-foreground 'git-gutter-fr:modified "yellow")
  (set-face-foreground 'git-gutter-fr:added    "blue")
  (set-face-foreground 'git-gutter-fr:deleted  "white")
  (setq git-gutter-fr:side 'left-fringe))

(use-package magit
  :after evil-leader
  :bind ("C-c r" . cesco/automatic-push)
  :config
  (setq magit-auto-revert-mode nil)
  (setq magit-repository-directories
	`(("~/go/src/github.com/cescoferraro" . 1)
	  (,user-emacs-directory              . 1)))

  (setq magit-repolist-columns
	'(("Name"    25 magit-repolist-column-ident                  ())
	  ("D"        1 magit-repolist-column-dirty                  ())
	  ("Behind "    5  magit-repolist-column-unpulled-from-upstream ((:right-align t)))
	  ("Ahead "    5  magit-repolist-column-unpushed-to-upstream   ((:right-align t)))
	  ("Version" 25 magit-repolist-column-version                ())
	  ))

  ;; Evil Keybinding
  (evil-leader/set-key "g" 'magit-status)
  (add-hook 'magit-repolist-mode-hook 'cesco/magit-repolist-hook)
  )

(use-package magit-gitflow
  :after (magit)
  :config
  (evil-define-key
    'normal magit-mode-map (kbd ">") 'magit-gitflow-popup)
  :init
  (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))

(use-package evil-magit
  :after magit
  :ensure t )

   #+END_SRC

** Hl-line+
   #+BEGIN_SRC emacs-lisp
   #+END_SRC

** Which-Keys

   #+BEGIN_SRC emacs-lisp
(use-package which-key :ensure t :diminish which-key-mode :config (which-key-mode))
   #+END_SRC

** Twitter

   #+BEGIN_SRC emacs-lisp
(use-package twittering-mode
  :config
  (setq twittering-use-master-password t)
  (setq twittering-icon-mode t)
  (setq twittering-timer-interval 300)
  (setq twittering-url-show-status nil))
   #+END_SRC

** Neotree
   #+BEGIN_SRC emacs-lisp
(defun cesco/extension-icons ()
  (add-to-list 'all-the-icons-icon-alist
	       '("^dobi.yaml"
		 all-the-icons-alltheicon "terminal"
		 :height 1.0
		 :face all-the-icons-pink))
  (add-to-list 'all-the-icons-icon-alist
	       '("\\.pcss$"
		 all-the-icons-alltheicon "css3"
		 :height 1.0
		 :face all-the-icons-red))
  (add-to-list 'all-the-icons-icon-alist
	       '("\\.tsx$"
		 all-the-icons-alltheicon "react"
		 :height 1.0
		 :face all-the-icons-blue))
  (add-to-list 'all-the-icons-icon-alist
	       '("\\.ts$"
		 all-the-icons-alltheicon "react"
		 :height 1.0
		 :face all-the-icons-blue))
  (add-to-list 'all-the-icons-icon-alist
	       '("\\.d.ts$"
		 all-the-icons-alltheicon "react"
		 :height 1.0
		 :face all-the-icons-blue))
  )

(defun cesco/neotree-copy ()
  (neotree-copy-filepath-to-yank-ring)
  (message "Path copied to the kill ring!")
  )

(defun cesco/neotree-toogle ()
  (interactive)
  (if (string-equal " *NeoTree*" (buffer-name))
      (progn
	(delete-window)
	(kill-buffer " *NeoTree*")
	(message "have just deleted neotree window"))
    (progn
      (if (get-buffer " *NeoTree*")
	  (progn
	    (message "neotree buffer was opened")
	    (kill-buffer " *NeoTree*"))
	(progn
	  (if (projectile-project-p)
	      (neotree-projectile-action)
	    (neotree-toggle))
	  (message "have just popped neotree")))))
  )

(defun cesco/neotree-evil ()
  (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
  (define-key evil-normal-state-local-map (kbd "I") 'neotree-hidden-file-toggle)
  (define-key evil-normal-state-local-map (kbd "z") 'neotree-stretch-toggle)
  (define-key evil-normal-state-local-map (kbd "1") 'neotree-change-root)
  (define-key evil-normal-state-local-map (kbd "R") 'neotree-refresh)
  (define-key evil-normal-state-local-map (kbd "m") 'neotree-rename-node)
  (define-key evil-normal-state-local-map (kbd "n") 'neotree-create-node)
  (define-key evil-normal-state-local-map (kbd "c") 'neotree-copy-node)
  (define-key evil-normal-state-local-map (kbd "C") 'cesco/neotree-copy)
  (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)
  (define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
  (define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split)
  (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
  (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter))

(use-package find-file-in-project :ensure t)
(use-package all-the-icons :ensure t :config (cesco/extension-icons))
(use-package neotree
  :after (evil evil-leader)
  :ensure all-the-icons
  :bind ([f2] . neotree-projectile-action)
  :config (evil-leader/set-key "m" 'cesco/neotree-toogle)
  :init (progn
	  (setq neo-theme (if window-system 'icons 'nerd)) ; 'classic, 'nerd, 'ascii, 'arrow
      (setq neo-force-change-root t)
	  (setq neo-show-hidden-files nil)
	  (add-hook 'neotree-mode-hook 'cesco/neotree-evil)))
   #+END_SRC

   #+RESULTS:

** Ivy

   #+BEGIN_SRC emacs-lisp
     (use-package counsel :ensure t)
     (use-package swiper
       :diminish ivy-mode
       :ensure t
       :config
       (progn
         (ivy-mode 1)
         (setq ivy-use-virtual-buffers t)
         (setq enable-recursive-minibuffers t)
         (global-set-key "\C-s" 'swiper)
         (global-set-key (kbd "C-c C-r") 'ivy-resume)
         (global-set-key (kbd "<f6>") 'ivy-resume)
         (global-set-key (kbd "<f1> f") 'counsel-describe-function)
         (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
         (global-set-key (kbd "<f1> l") 'counsel-find-library)
         ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
         ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
         (global-set-key (kbd "C-c k") 'counsel-ag)
         (global-set-key (kbd "C-x l") 'counsel-locate)
         (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
         (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
         )
       )


   #+END_SRC

** Golden-ratio

   #+BEGIN_SRC emacs-lisp
     (use-package golden-ratio
       :diminish golden-ratio-mode
   	    :config
   	    (golden-ratio-mode 1))
   #+END_SRC

** Beacon

   #+BEGIN_SRC emacs-lisp
(use-package beacon
:diminish beacon-mode
:ensure t
:config
(progn
(beacon-mode 1)
(setq beacon-push-mark 35)
(setq beacon-color "#666600")))
   #+END_SRC

** Eldoc

   #+begin_src emacs-lisp
(use-package eldoc :ensure t :diminish eldoc-mode)
   #+end_src


** ModeLine

   #+BEGIN_SRC emacs-lisp
(use-package spaceline :ensure t)

(use-package spaceline-config
  :ensure spaceline
  :config
  (setq-default
   powerline-height 24
   powerline-default-separator 'curve
   mode-line-format '("%e" (:eval (spaceline-ml-main)))
   spaceline-highlight-face-func 'spaceline-highlight-face-evil-state
   spaceline-flycheck-bullet "❖ %s"
   spaceline-separator-dir-left '(left . left)
   spaceline-separator-dir-right '(right . right))
  (set-face-attribute 'spaceline-evil-emacs nil :background "#Ff8c00"  )
  (set-face-attribute 'spaceline-evil-insert nil :background "#5fd7ff" :foreground "black")
  (set-face-attribute 'spaceline-evil-motion nil :background "#Eecfa1")
  (set-face-attribute 'spaceline-evil-normal nil :background "#FF5722" :foreground "white")
  (set-face-attribute 'spaceline-evil-replace nil :background "#f92672")
  (set-face-attribute 'spaceline-evil-visual nil :background "#fd971f")
  (set-face-attribute 'powerline-active1 nil :background "grey10" :foreground "white smoke")
  (set-face-attribute 'mode-line-buffer-id nil :foreground "#E1BEE7" :background "#8b0000")
  (set-face-attribute 'mode-line-emphasis  nil :foreground "white" :background "purple")
  (set-face-attribute 'mode-line nil :foreground "Black" :background "black" :box nil)
  (set-face-attribute 'mode-line-inactive nil :background "#4682b4" :box nil)
  (set-face-attribute 'powerline-active1 nil :foreground "White" :background "grey22" :box nil)
  (set-face-attribute 'powerline-active2 nil :foreground "Black" :background "grey22" :box nil)
  (spaceline-install
    'main
    '(
      (evil-state :face highlight-face :when t)
      (projectile-root  :face mode-line-emphasis)
      ((remote-host buffer-id version-control) :separator "  " :face mode-line-buffer-id )
      (nyan-cat)
      (process :when active))
    '((selection-info :face region :when mark-active)
      ((flycheck-error flycheck-warning flycheck-info) :when active)
      (which-function)
      (major-mode  :face mode-line-emphasis)
      (global :when active)
      )))
   #+END_SRC

** Yasnippet

   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
   :diminish yas-minor-mode
   :config
	  (yas-global-mode 1))
   #+END_SRC
   #+begin_src emacs-lisp
(use-package undo-tree
	  :diminish undo-tree-mode
	  :init (global-undo-tree-mode))
   #+end_src

** Company
   #+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :config
  (progn
    (add-to-list 'company-backends '(company-elisp  :with company-yasnippet))
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (require 'company-emacs-eclim)
    (company-emacs-eclim-setup)
    (global-company-mode +1))
  :init
  (progn
    (setq company-dabbrev-downcase 0)
    (setq company-idle-delay 0)
    (setq company-dabbrev-code-everywhere t)
    (setq company-minimum-prefix-length 1)
    (setq-default company-idle-delay 0)
    (setq-default company-tooltip-align-annotations t)
    )
  )
   #+END_SRC

** Startup Screen
   #+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(use-package dashboard
  :config
  (dashboard-setup-startup-hook))

   #+END_SRC

** SmartParens
   #+BEGIN_SRC emacs-lisp

     (use-package smartparens
       :ensure smartparens
       :diminish smartparens-mode
       :config
       (progn
         (require 'smartparens-config)
         (require 'smartparens-html)
         (require 'smartparens-python)
         (require 'smartparens-latex)
         (smartparens-global-mode t)
         (show-smartparens-global-mode t)
         )

       )

   #+END_SRC

** Engine Mode

   #+BEGIN_SRC emacs-lisp
;; engine
;; Search engines integrated into Emacs.
(use-package engine-mode
  :commands (engine/search-github engine/search-google)
  :config

  (global-set-key (kbd "C-c g") 'engine/search-google)
  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "h")
  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "g"))
   #+END_SRC

** Expand-Region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :after evil
       :ensure t
       :config
       (eval-after-load "evil" '(setq expand-region-contract-fast-key "z"))
       (evil-leader/set-key "xx" 'er/expand-region)
       (global-set-key (kbd "C-a") 'er/expand-region)
       (global-set-key (kbd "C-c a") 'er/expand-region)
       )
   #+END_SRC

** Kubernetes Timonier

   #+BEGIN_SRC emacs-lisp
     (setq timonier-k8s-proxy "http://127.0.0.1:8001")
   #+END_SRC

** tabbar

   #+BEGIN_SRC emacs-lisp
(defun cesco/tabbar-faces ()
(interactive)
 (set-face-attribute
  'tabbar-default nil
  :background "gray20"
  :foreground "gray20"
  :box '(:line-width 1 :color "gray20" :style nil))
 (set-face-attribute
  'tabbar-unselected nil
  :background "gray30"
  :foreground "white"
  :box '(:line-width 5 :color "gray30" :style nil))
 (set-face-attribute
  'tabbar-selected nil
  :background "gray75"
  :foreground "black"
  :box '(:line-width 5 :color "gray75" :style nil))
 (set-face-attribute
  'tabbar-highlight nil
  :background "white"
  :foreground "black"
  :underline nil
  :box '(:line-width 5 :color "white" :style nil))
 (set-face-attribute
  'tabbar-button nil
  :box '(:line-width 1 :color "gray20" :style nil))
 (set-face-attribute
  'tabbar-separator nil
  :background "gray20"
  :height 0.6)
 )

;; adding spaces
(defun tabbar-buffer-tab-label (tab)
  "Return a label for TAB.
That is, a string used to represent it on the tab bar."
  (let ((label  (if tabbar--buffer-show-groups
                    (format "[%s]  " (tabbar-tab-tabset tab))
                  (format "%s  " (tabbar-tab-value tab)))))
    ;; Unless the tab bar auto scrolls to keep the selected tab
    ;; visible, shorten the tab label to keep as many tabs as possible
    ;; in the visible area of the tab bar.
    (if tabbar-auto-scroll-flag
        label
      (tabbar-shorten
       label (max 1 (/ (window-width)
                       (length (tabbar-view
                                (tabbar-current-tabset)))))))))

(defun my-tabbar-buffer-groups-by-project ()
  (list
   (cond
    ((memq major-mode '(mu4e-view-mode
			mu4e-main-mode
			mu4e-headers-mode
			mu4e-view-raw-mode
			twittering-mode weibo-timeline-mode
			jabber-roster-mode jabber-chat-mode erc-mode douban-music-mode
			)) "Activity")
    ((memq major-mode '(eshell-mode term-mode shell-mode))
     (if (projectile-project-p) (projectile-project-name) "Common")
     )
    ((string-equal "*" (substring (buffer-name) 0 1))
     "Emacs"
     )
    ((memq major-mode '(fundamental-mode))
     "Emacs"
     )
    (t
     (if (projectile-project-p) (projectile-project-name) "Common")
     )
    )))


(defun my-tabbar-buffer-groups-by-all ()
  (list
   (cond
    ((string-equal "*" (substring (buffer-name) 0 1))
     "Emacs"
     )
    (t "All"))))

(use-package tabbar
  :after evil
  :init
  :config
  (cesco/tabbar-faces)
  (setq tabbar-background-color "#696969")
  (setq tabbar-cycle-scope 'tabs)
  (setq tabbar-background-color nil)
  (setq tabbar-separator (quote (1.0)))
  (setq tool-bar-mode nil)
  (global-set-key (kbd "s-{") 'tabbar-backward-group)
  (global-set-key (kbd "s-}") 'tabbar-forward-group)
  (global-set-key (kbd "s-[") 'tabbar-backward)
  (global-set-key (kbd "s-]") 'tabbar-forward)
  (setq tabbar-buffer-groups-function 'my-tabbar-buffer-groups-by-project)
  (tabbar-mode 1))
   #+END_SRC

* Languages
** Golang
*** Go path
    #+BEGIN_SRC emacs-lisp
(cond
   ((string-equal system-type "gnu/linux")(setenv "GOPATH" "/home/cescoferraro/go"))
   ((string-equal system-type "darwin")(setenv "GOPATH" "/Users/cesco/go")))
(add-to-list 'exec-path (concat (getenv "GOPATH")  "/bin"))
(add-to-list 'load-path (concat (getenv "GOPATH")  "/src/github.com/golang/lint/misc/emacs"))
    #+END_SRC
*** Go-mode
    #+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
  :if (executable-find "go")
  :bind (:map go-mode-map
              ("M-." . godef-jump)
              ("C-c C-a" . go-import-add)
              ("C-c C-r" . go-remove-unused-imports)
              ("C-c C-i" . go-goto-imports)
              ("C-c C-c" . compile))
  :after evil
  :init
    (setq gofmt-command "goimports")
  :config

  (evil-leader/set-key-for-mode 'go-mode "j" 'godef-jump)
  (defun my-go-mode-hook ()
    (setq tab-width 8)
    (if (not (string-match "go" compile-command))
	(set (make-local-variable 'compile-command) "go build -v && go test -v && go vet"))
    (load-file "$GOPATH/src/github.com/dominikh/go-mode.el/go-guru.el")
    )
  (add-hook 'go-mode-hook 'go-eldoc-setup)
  (add-hook 'go-mode-hook 'my-go-mode-hook)
    (add-hook 'before-save-hook 'gofmt-before-save)
  )
    #+END_SRC

*** GoLint
    #+begin_src emacs-lisp
  (use-package golint :ensure t)
    #+end_src

*** Go ElDoc
    #+begin_src emacs-lisp
(use-package go-eldoc
  :after (go-mode hydra)
  :config
  (add-hook 'go-mode-hook 'go-eldoc-setup))
    #+end_src

*** Go-company

    #+BEGIN_SRC emacs-lisp
(use-package company-go
  :ensure t
  :config
  (defun cesco/g-yas ()
    (add-to-list (make-local-variable 'company-backends) '(company-go :with company-yasnippet)))
  (add-hook 'go-mode-hook 'cesco/g-yas)
  (setq company-go-show-annotation t)
  (setq company-go-insert-arguments t))
    #+END_SRC

*** GoSnippets
    #+begin_src emacs-lisp
(use-package go-snippets
  :after (go-mode hydra))
    #+end_src

*** GoDoctor
    #+begin_src emacs-lisp
(use-package godoctor
  :after (go-mode hydra)
  :if (executable-find "godoctor")
  :bind (:map go-mode-map ("C-M-z" . hydra-godoctor/body))
  :config
  (defhydra hydra-godoctor (:hint nil :color blue :column 4)
  "
     ^Up^            ^Down^        ^Other^
----------------------------------------------
[_a_]   Next     [_d_] Unmark    [_f_] Unmark
[_s_]   Skip
^ ^
"
    ("a" godoctor-rename :exit t)
    ("s" godoctor-extract )
    ("d" godoctor-toggle )
    ("f" godoctor-godoc )))

    #+end_src

*** GoGuru
    #+begin_src emacs-lisp
(use-package go-guru
  :after (go-mode hydra)
  :if (executable-find "guru")
  :demand t
  :init
  (defun shackra/go-mode-set-scope ()
    (when (eq major-mode 'go-mode)
      (set (make-local-variable 'go-guru-scope)
           (concat (projectile-project-root) "..."))))
  :bind (:map go-mode-map
              ("M-." . go-guru-definition)
              ("C-M-g" . hydra-go-guru/body))
  :config
  (defhydra hydra-go-guru (:color blue :columns 2)
    "Contesta preguntas sobre código fuente escrito en Go"
    ("a" go-guru-callees "Receptores de llamada, función bajo punto actual")
    ("s" go-guru-callers "Llamadores, función bajo punto actual")
    ("d" go-guru-callstack "Muestra grafo de llamadas desde una raíz, función bajo punto actual")
    ("f" go-guru-describe "Describe la sintaxis seleccionada, su tipo y métodos")
    ("g" go-guru-freevars "Enumera las variables libres, marca actual")
    ("h" go-guru-referrers "Enumera referencias al objeto, identificador marcado")
    ("j" go-guru-peers "Enumera un set de remitentes/destinatarios para las operaciones enviar/recibir de este canal")
    ("k" go-guru-pointsto "Muestra lo que apunta, expresión marcada")
    ("l" go-guru-implements "Describe la relación de implementación para tipos en un paquete conteniendo el cursor")
    ("ñ" go-guru-whicherrs "Muestra globales, constantes y tipos, expresión marcada (de tipo 'error')"))
  (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode)
  (add-hook 'projectile-mode-hook #'shackra/go-mode-set-scope))
    #+end_src

** Java
*** Gradle
    skdbfjsdf
    #+BEGIN_SRC emacs-lisp
(use-package groovy-mode
  :ensure t
  :defer t
  :mode (("\\.groovy$" . groovy-mode)
         ("\\.gradle$" . groovy-mode))
  :config (add-hook 'groovy-mode-hook 'turn-on-evil-mode))

(use-package gradle-mode
  :ensure t
  :diminish gradle-mode
  :config
  (progn
    (defun build-and-run ()
      (interactive)
      (gradle-run "build run"))

    (define-key gradle-mode-map (kbd "C-c C-r") 'build-and-run)
    ))

(add-hook 'java-mode-hook '(lambda() (gradle-mode 1)))

    #+END_SRC
*** Eclim
    #+BEGIN_SRC emacs-lisp
(add-hook 'java-mode-hook (lambda ()
                            (setq c-basic-offset 4
                                  tab-width 4
                                  indent-tabs-mode t)))


(defun cesco/eclim-evil ()
  (evil-leader/set-key-for-mode 'eclim-mode
    "j" (lambda () (interactive)(eclim-java-find-declaration))
    )
  )

(use-package eclim
  :ensure t
  :after evil-leader
  :if (string-match-p (regexp-quote "cesco") user-login-name)
  :config (progn
	    ;; (setq eclimd-autostart t)
	    (cesco/eclim-evil)
	    (cond
	     ((string-equal system-type "gnu/linux")
	      (setq eclim-executable "/opt/eclipse/eclim")
	      )
	     ((string-equal system-type "darwin")
	      (setq eclim-executable "~/eclipse/Eclipse.app/Contents/Eclipse/eclim")
	      )
	     )
	    (define-key eclim-mode-map (kbd "C-c C-c") 'eclim-problems-correct)
	    (global-eclim-mode)
	    ))


    #+END_SRC
*** Meghanada


    #+BEGIN_SRC emacs-lisp

(use-package meghanada :ensure t
:if (not (string-match-p (regexp-quote "cesco") user-login-name))
  :after evil-leader
  :config (progn

     (evil-leader/set-key-for-mode 'java-mode "t"
       (lambda ()
         (interactive)
         (meghanada-run-task "test")
         (ace-window "")
         (golden-ratio)
         )
       )
     (evil-leader/set-key-for-mode 'java-mode "c"
       (lambda ()
         (interactive)
         (meghanada-run-task "run")
         (ace-window "")
         (golden-ratio)
         )
       )


     (add-hook 'java-mode-hook
   	    (lambda ()
   	      ;; meghanada-mode on
   	      (meghanada-mode t)
   	      (add-hook 'before-save-hook (lambda ()
   					    (flycheck-display-error-at-point)
   					    (meghanada-code-beautify-before-save)
   					    ))))
	    )

  )
    #+END_SRC

** Javascript

   #+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :commands (js2-mode)
  :config
  (progn (evil-leader/set-key-for-mode 'js2-mode
	   "j"  (lambda ()
		  (interactive)
		  (js2-jump-to-definition )
		  )
	   ) )
  :mode (("\\.js\\'" . js2-mode)))
   #+END_SRC

** Typescript

   #+BEGIN_SRC emacs-lisp
(defun cesco/tide-checker ()

  (flycheck-def-option-var flycheck-typescript-tsconfig
      nil typescript-tslint-cesco
    "The path of tsconfig.json ."
    :type '(choice (const :tag "No custom tsconfig file" nil)


		   (directory :tag "Custom tsconfig.json"))
    :safe #'stringp
    :package-version '(flycheck . "27"))

  (flycheck-define-checker typescript-tslint-cesco
    "TypeScript style checker using TSLint."
    :command ("tslint" "--format" "json"
	      (config-file "--config" flycheck-typescript-tslint-config)
	      (config-file "--project" flycheck-typescript-tsconfig)
	      (option "--rules-dir" flycheck-typescript-tslint-rulesdir)
	      (eval flycheck-tslint-args)
	      source-inplace)
    :error-parser flycheck-parse-tslint
    :modes (web-mode typescript-mode))

  ;; (flycheck-add-mode 'typescript-tslint-cesco 'web-mode)
  )
(defun cesco/tslint ()
  (setq flycheck-tslint-args . (nil))
  (flycheck-select-checker 'typescript-tslint)
  )
(defun cesco/custom-tslint ()
  (if (projectile-project-p)
      (if (file-exists-p (concat ( projectile-project-root ) "tsconfig.json"))
	  (progn
	    ;; (setq flycheck-tslint-args . ("--type-check"))
	    (setq flycheck-typescript-tsconfig . ( (concat projectile-project-root "tsconfig.json" )))
	    (flycheck-select-checker 'typescript-tslint-cesco))
        (cesco/tslint)
	)))

(add-hook 'json-mode-hook
          (lambda ()
            (make-local-variable 'js-indent-level)
            (setq js-indent-level 2)))
(defun cesco/tide-mode ()
  (interactive)
  (setq tide-tsserver-process-environment '("TSS_LOG=-level verbose -file /tmp/tss.log"))
  (setq tide-tsserver-executable "node_modules/.bin/tsserver")
  (tide-setup)
  (cesco/custom-tslint)
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (add-hook 'before-save-hook 'tide-format-before-save)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (company-mode +1)
  ;; (add-to-list 'company-backends '(company-tide :with company-yasnippet))
  (set (make-local-variable 'company-backends)
       '((company-tide company-files company-yasnippet))))

(defun cesco/tide-evil ()
  (evil-leader/set-key-for-mode 'web-mode
    "j" (lambda () (interactive)(tide-jump-to-definition))
    )
  )


(use-package tide
  :diminish tide-mode
  :after (flycheck evil-leader)
  :config
  (cesco/tide-evil)
  (cesco/tide-checker)
  (add-hook 'typescript-mode-hook #'cesco/tide-mode) )

(use-package web-mode :ensure t
  :ensure tide
  :mode (("\\.tsx$" . web-mode)
         ("\\.jsx$" . web-mode))
  :config
  (add-hook 'web-mode-hook
	    (lambda ()
	      (when (string-equal "tsx" (file-name-extension buffer-file-name))
		(cesco/tide-mode))))

  (add-hook 'web-mode-hook
	    (lambda ()
	      (when (string-equal "jsx" (file-name-extension buffer-file-name))
		(cesco/tide-mode))))

  )
   #+END_SRC

* Evil
** Nerd Commenter

   #+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :after evil
  :config (progn
	    (evilnc-default-hotkeys)))
   #+end_src

** Smartparens

   #+begin_src emacs-lisp
(use-package
  evil-smartparens
  :diminish evil-smartparens-mode
  :after evil
  :init (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
   #+end_src

** Org
   #+begin_src emacs-lisp
(use-package evil-org
  :diminish evil-org-mode
  :after evil
  :ensure t)
   #+end_src

** Surround

   #+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode))
   #+END_SRC

** Evil itself

   #+BEGIN_SRC emacs-lisp
(use-package evil
  :after evil-leader
  :ensure t
  :config
  (set-default 'evil-symbol-word-search t)
  (define-key evil-normal-state-map "L" 'tabbar-forward-tab)
  (define-key evil-normal-state-map "H" 'tabbar-backward-tab)
  (evil-define-key 'normal evil-org-mode-map
    "H" 'tabbar-backward-tab
    "L" 'tabbar-forward-tab)
  (evil-mode)
  )
   #+END_SRC

** Leader Key

   #+BEGIN_SRC emacs-lisp

(defun cesco/config-evil-leader ()
  (evil-leader/set-leader "SPC")
  (evil-leader/set-key
    "/" 'evilnc-comment-or-uncomment-lines
    "ci" 'evilnc-comment-or-uncomment-lines
    "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
    "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
    "cc" 'evilnc-copy-and-comment-lines
    "cp" 'evilnc-comment-or-uncomment-paragraphs
    "cr" 'comment-or-uncomment-region
    "cv" 'evilnc-toggle-invert-comment-line-by-line
    "\\" 'evilnc-comment-operator
    "f" 'helm-projectile
    "k" 'helm-buffers-list
    "s" 'save-buffer
    "q" 'kill-emacs
    "w" 'delete-window
    "e" 'kill-this-buffer
    "," 'previous-buffer
    "a" 'helm-projectile-ag
    "r" 'helm-recentf
    "SPC" 'helm-M-x
    ";" 'projectile-run-eshell
    "E" 'org-export-dispatch
    "i" 'cesco/indent
    "TAB" 'org-cycle
    "p" 'projectile-switch-project
    (kbd ".") (lambda () (interactive)(golden-ratio)(ace-window ""))
    (kbd "n") (lambda () (interactive)(golden-ratio)(ace-window ""))
    (kbd "o") (lambda () (interactive) (find-file "~/.emacs.d/configuration.org")))
  (global-evil-leader-mode)
  )

(use-package evil-leader :ensure t :config (cesco/config-evil-leader))
   #+END_SRC

* Hydras

  #+begin_src emacs-lisp
(use-package hydra :ensure t)
  #+end_src

** Personal Hydra!
   #+begin_src emacs-lisp
(defhydra cesco/hydra ()
  "
  ^Window^        ^Hugo^            ^SEARCH^             ^GIT^              ^Others^
----------------------------------------------------------------------------------------
[_=_] Zoom IN   [_h_] Posts      [_1_] GOOGLE      [_p_] Auto-PUSH    [_d_] Kill all Buffers
[_-_] Zoom Out  [_H_] Tabs       [_2_] GITHUB      [_g_] Repo's List  [_p_] Mark all
^ ^             [_C-p_] Preview
"
  ("C-p" easy-hugo-preview "in" :color blue)
  ("=" text-scale-increase "in")
  ("1" engine/search-google "in")
  ("2" engine/search-github  "in")
  ("-" text-scale-decrease "out")
  ("h" (lambda () (interactive) (setq easy-hugo-postdir "content/blog") (easy-hugo))   "Posts" :color blue)
  ("H" (lambda () (interactive) (setq easy-hugo-postdir "content/fixed") (easy-hugo))   "Fixed" :color blue)
  ("e" (lambda () (interactive)(find-file "~/.emacs.d/configuration.org")) "init.org"  :color blue)
  ("b" (lambda () (interactive)(find-file "~/.bash.local")) "bash.local"  :color blue)
  (";" cesco/insert-semicolon  "insert semicolon" :color blue)
  ("a" hs-show-all "unfold all" :color blue)
  ("r" tide-restart-server  "all" :color blue)
  ("g" magit-list-repositories "Magit-List-Repos" :color blue)
  ("p" cesco/automatic-push "Automatic push" :color blue )
  ("d" cesco/kill-other-buffers "kill all buffer" :color blue))

(global-set-key[(shift control d)] 'cesco/hydra/body)

   #+end_src

** Help Hydra!

   #+begin_src emacs-lisp
(defhydra cesco/help-hydra ()
  "cesco"
  ("f" describe-function "defun" : color blue)
  ("v" describe-variable "setq" : color blue)
)
(global-set-key[(shift control h)] 'cesco/help-hydra/body)

   #+end_src

** Multiple Cursor

   #+begin_src emacs-lisp
(defhydra multiple-cursors-hydra (:hint nil)
  "
     ^Up^            ^Down^        ^Other^
----------------------------------------------
[_p_]   Next    [_n_]   Next    [_l_] Edit lines
[_P_]   Skip    [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
^ ^             ^ ^             [_q_] Quit
"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("r" mc/mark-all-in-region-regexp :exit t)
  ("q" nil))
(global-set-key[(shift control s)] 'multiple-cursors-hydra/body)
   #+end_src

   *10.000 HOURS*
